name: Smoke Test Electron App

on:
  workflow_run:
    workflows: ["Build Windows App"]
    types:
      - completed

jobs:
  smoke-test:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: windows-latest
    steps:
      - name: Download installer artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-installer
          path: ./installer

      - name: Set required environment variables
        run: |
          [System.Environment]::SetEnvironmentVariable('SQUARE_ACCESS_TOKEN', '${{ secrets.SQUARE_ACCESS_TOKEN }}', 'User')
          [System.Environment]::SetEnvironmentVariable('SQUARE_API_URL', '${{ secrets.SQUARE_API_URL }}', 'User')
          [System.Environment]::SetEnvironmentVariable('SQUARE_API_VERSION', '${{ secrets.SQUARE_API_VERSION }}', 'User')
          [System.Environment]::SetEnvironmentVariable('SQUARE_ENVIRONMENT', '${{ secrets.SQUARE_ENVIRONMENT }}', 'User')
          [System.Environment]::SetEnvironmentVariable('VITE_USE_MOCK_API', 'false', 'User')
        shell: pwsh

      - name: Find installer
        id: find_installer
        run: |
          $installer = Get-ChildItem -Path ./installer -Filter *.exe | Select-Object -First 1
          echo "installer_path=$($installer.FullName)" >> $env:GITHUB_OUTPUT

      - name: Install app silently
        run: |
          $installer = "${{ steps.find_installer.outputs.installer_path }}"
          Start-Process -FilePath $installer -ArgumentList "/S" -Wait

      - name: List Program Files directory
        run: |
          if (Test-Path "C:\Program Files\Rec Center Check-in") {
            Get-ChildItem "C:\Program Files\Rec Center Check-in" -Recurse -File | Select-Object FullName
          } else {
            Write-Host "Directory not found: C:\Program Files\Rec Center Check-in"
          }
        shell: pwsh

      - name: List Program Files (x86) directory
        run: |
          if (Test-Path "C:\Program Files (x86)\Rec Center Check-in") {
            Get-ChildItem "C:\Program Files (x86)\Rec Center Check-in" -Recurse -File | Select-Object FullName
          } else {
            Write-Host "Directory not found: C:\Program Files (x86)\Rec Center Check-in"
          }
        shell: pwsh

      - name: Find installed app executable
        id: find_exe
        run: |
          $exe = Get-ChildItem "C:\Program Files\Rec Center Check-in" -Filter *.exe -Recurse | Select-Object -First 1
          if ($null -eq $exe) {
            $exe = Get-ChildItem "C:\Program Files (x86)\Rec Center Check-in" -Filter *.exe -Recurse | Select-Object -First 1
          }
          if ($null -eq $exe) { throw "App executable not found" }
          echo "exe_path=$($exe.FullName)" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Run app and check it starts
        run: |
          Start-Process -FilePath "${{ steps.find_exe.outputs.exe_path }}"
          Start-Sleep -Seconds 10
          $processName = [System.IO.Path]::GetFileNameWithoutExtension("${{ steps.find_exe.outputs.exe_path }}")
          $process = Get-Process $processName -ErrorAction SilentlyContinue
          if ($null -eq $process) { throw "App did not start" }
        shell: pwsh

      - name: Kill app
        run: |
          $processName = [System.IO.Path]::GetFileNameWithoutExtension("${{ steps.find_exe.outputs.exe_path }}")
          Stop-Process -Name $processName -Force
        shell: pwsh 